/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "THotel.h"
#import "TMember.h"
#import "TBooking.h"

#import "ISevenDaysService.h"

@implementation ClientInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDeviceId: (NSString *) deviceId platform: (NSString *) platform platformVersion: (NSString *) platformVersion appId: (int32_t) appId version: (NSString *) version mpId: (NSString *) mpId lastUpdateTime: (int64_t) lastUpdateTime
{
  self = [super init];
  __deviceId = [deviceId retain_stub];
  __deviceId_isset = YES;
  __platform = [platform retain_stub];
  __platform_isset = YES;
  __platformVersion = [platformVersion retain_stub];
  __platformVersion_isset = YES;
  __appId = appId;
  __appId_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  __mpId = [mpId retain_stub];
  __mpId_isset = YES;
  __lastUpdateTime = lastUpdateTime;
  __lastUpdateTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"deviceId"])
  {
    __deviceId = [[decoder decodeObjectForKey: @"deviceId"] retain_stub];
    __deviceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"platform"])
  {
    __platform = [[decoder decodeObjectForKey: @"platform"] retain_stub];
    __platform_isset = YES;
  }
  if ([decoder containsValueForKey: @"platformVersion"])
  {
    __platformVersion = [[decoder decodeObjectForKey: @"platformVersion"] retain_stub];
    __platformVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"appId"])
  {
    __appId = [decoder decodeInt32ForKey: @"appId"];
    __appId_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  if ([decoder containsValueForKey: @"mpId"])
  {
    __mpId = [[decoder decodeObjectForKey: @"mpId"] retain_stub];
    __mpId_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastUpdateTime"])
  {
    __lastUpdateTime = [decoder decodeInt64ForKey: @"lastUpdateTime"];
    __lastUpdateTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__deviceId_isset)
  {
    [encoder encodeObject: __deviceId forKey: @"deviceId"];
  }
  if (__platform_isset)
  {
    [encoder encodeObject: __platform forKey: @"platform"];
  }
  if (__platformVersion_isset)
  {
    [encoder encodeObject: __platformVersion forKey: @"platformVersion"];
  }
  if (__appId_isset)
  {
    [encoder encodeInt32: __appId forKey: @"appId"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
  if (__mpId_isset)
  {
    [encoder encodeObject: __mpId forKey: @"mpId"];
  }
  if (__lastUpdateTime_isset)
  {
    [encoder encodeInt64: __lastUpdateTime forKey: @"lastUpdateTime"];
  }
}

- (void) dealloc
{
  [__deviceId release_stub];
  [__platform release_stub];
  [__platformVersion release_stub];
  [__version release_stub];
  [__mpId release_stub];
  [super dealloc_stub];
}

- (NSString *) deviceId {
  return [[__deviceId retain_stub] autorelease_stub];
}

- (void) setDeviceId: (NSString *) deviceId {
  [deviceId retain_stub];
  [__deviceId release_stub];
  __deviceId = deviceId;
  __deviceId_isset = YES;
}

- (BOOL) deviceIdIsSet {
  return __deviceId_isset;
}

- (void) unsetDeviceId {
  [__deviceId release_stub];
  __deviceId = nil;
  __deviceId_isset = NO;
}

- (NSString *) platform {
  return [[__platform retain_stub] autorelease_stub];
}

- (void) setPlatform: (NSString *) platform {
  [platform retain_stub];
  [__platform release_stub];
  __platform = platform;
  __platform_isset = YES;
}

- (BOOL) platformIsSet {
  return __platform_isset;
}

- (void) unsetPlatform {
  [__platform release_stub];
  __platform = nil;
  __platform_isset = NO;
}

- (NSString *) platformVersion {
  return [[__platformVersion retain_stub] autorelease_stub];
}

- (void) setPlatformVersion: (NSString *) platformVersion {
  [platformVersion retain_stub];
  [__platformVersion release_stub];
  __platformVersion = platformVersion;
  __platformVersion_isset = YES;
}

- (BOOL) platformVersionIsSet {
  return __platformVersion_isset;
}

- (void) unsetPlatformVersion {
  [__platformVersion release_stub];
  __platformVersion = nil;
  __platformVersion_isset = NO;
}

- (int32_t) appId {
  return __appId;
}

- (void) setAppId: (int32_t) appId {
  __appId = appId;
  __appId_isset = YES;
}

- (BOOL) appIdIsSet {
  return __appId_isset;
}

- (void) unsetAppId {
  __appId_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (NSString *) mpId {
  return [[__mpId retain_stub] autorelease_stub];
}

- (void) setMpId: (NSString *) mpId {
  [mpId retain_stub];
  [__mpId release_stub];
  __mpId = mpId;
  __mpId_isset = YES;
}

- (BOOL) mpIdIsSet {
  return __mpId_isset;
}

- (void) unsetMpId {
  [__mpId release_stub];
  __mpId = nil;
  __mpId_isset = NO;
}

- (int64_t) lastUpdateTime {
  return __lastUpdateTime;
}

- (void) setLastUpdateTime: (int64_t) lastUpdateTime {
  __lastUpdateTime = lastUpdateTime;
  __lastUpdateTime_isset = YES;
}

- (BOOL) lastUpdateTimeIsSet {
  return __lastUpdateTime_isset;
}

- (void) unsetLastUpdateTime {
  __lastUpdateTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDeviceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlatform: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlatformVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAppId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMpId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLastUpdateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ClientInfo"];
  if (__deviceId_isset) {
    if (__deviceId != nil) {
      [outProtocol writeFieldBeginWithName: @"deviceId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __deviceId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__platform_isset) {
    if (__platform != nil) {
      [outProtocol writeFieldBeginWithName: @"platform" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __platform];
      [outProtocol writeFieldEnd];
    }
  }
  if (__platformVersion_isset) {
    if (__platformVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"platformVersion" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __platformVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__appId_isset) {
    [outProtocol writeFieldBeginWithName: @"appId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __appId];
    [outProtocol writeFieldEnd];
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mpId_isset) {
    if (__mpId != nil) {
      [outProtocol writeFieldBeginWithName: @"mpId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __mpId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastUpdateTime_isset) {
    [outProtocol writeFieldBeginWithName: @"lastUpdateTime" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __lastUpdateTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ClientInfo("];
  [ms appendString: @"deviceId:"];
  [ms appendFormat: @"\"%@\"", __deviceId];
  [ms appendString: @",platform:"];
  [ms appendFormat: @"\"%@\"", __platform];
  [ms appendString: @",platformVersion:"];
  [ms appendFormat: @"\"%@\"", __platformVersion];
  [ms appendString: @",appId:"];
  [ms appendFormat: @"%i", __appId];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @",mpId:"];
  [ms appendFormat: @"\"%@\"", __mpId];
  [ms appendString: @",lastUpdateTime:"];
  [ms appendFormat: @"%qi", __lastUpdateTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ServerInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMinVersion: (NSString *) minVersion latestVersion: (NSString *) latestVersion updateUrl: (NSString *) updateUrl cityListUrl: (NSString *) cityListUrl regionListUrl: (NSString *) regionListUrl
{
  self = [super init];
  __minVersion = [minVersion retain_stub];
  __minVersion_isset = YES;
  __latestVersion = [latestVersion retain_stub];
  __latestVersion_isset = YES;
  __updateUrl = [updateUrl retain_stub];
  __updateUrl_isset = YES;
  __cityListUrl = [cityListUrl retain_stub];
  __cityListUrl_isset = YES;
  __regionListUrl = [regionListUrl retain_stub];
  __regionListUrl_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"minVersion"])
  {
    __minVersion = [[decoder decodeObjectForKey: @"minVersion"] retain_stub];
    __minVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"latestVersion"])
  {
    __latestVersion = [[decoder decodeObjectForKey: @"latestVersion"] retain_stub];
    __latestVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateUrl"])
  {
    __updateUrl = [[decoder decodeObjectForKey: @"updateUrl"] retain_stub];
    __updateUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityListUrl"])
  {
    __cityListUrl = [[decoder decodeObjectForKey: @"cityListUrl"] retain_stub];
    __cityListUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"regionListUrl"])
  {
    __regionListUrl = [[decoder decodeObjectForKey: @"regionListUrl"] retain_stub];
    __regionListUrl_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__minVersion_isset)
  {
    [encoder encodeObject: __minVersion forKey: @"minVersion"];
  }
  if (__latestVersion_isset)
  {
    [encoder encodeObject: __latestVersion forKey: @"latestVersion"];
  }
  if (__updateUrl_isset)
  {
    [encoder encodeObject: __updateUrl forKey: @"updateUrl"];
  }
  if (__cityListUrl_isset)
  {
    [encoder encodeObject: __cityListUrl forKey: @"cityListUrl"];
  }
  if (__regionListUrl_isset)
  {
    [encoder encodeObject: __regionListUrl forKey: @"regionListUrl"];
  }
}

- (void) dealloc
{
  [__minVersion release_stub];
  [__latestVersion release_stub];
  [__updateUrl release_stub];
  [__cityListUrl release_stub];
  [__regionListUrl release_stub];
  [super dealloc_stub];
}

- (NSString *) minVersion {
  return [[__minVersion retain_stub] autorelease_stub];
}

- (void) setMinVersion: (NSString *) minVersion {
  [minVersion retain_stub];
  [__minVersion release_stub];
  __minVersion = minVersion;
  __minVersion_isset = YES;
}

- (BOOL) minVersionIsSet {
  return __minVersion_isset;
}

- (void) unsetMinVersion {
  [__minVersion release_stub];
  __minVersion = nil;
  __minVersion_isset = NO;
}

- (NSString *) latestVersion {
  return [[__latestVersion retain_stub] autorelease_stub];
}

- (void) setLatestVersion: (NSString *) latestVersion {
  [latestVersion retain_stub];
  [__latestVersion release_stub];
  __latestVersion = latestVersion;
  __latestVersion_isset = YES;
}

- (BOOL) latestVersionIsSet {
  return __latestVersion_isset;
}

- (void) unsetLatestVersion {
  [__latestVersion release_stub];
  __latestVersion = nil;
  __latestVersion_isset = NO;
}

- (NSString *) updateUrl {
  return [[__updateUrl retain_stub] autorelease_stub];
}

- (void) setUpdateUrl: (NSString *) updateUrl {
  [updateUrl retain_stub];
  [__updateUrl release_stub];
  __updateUrl = updateUrl;
  __updateUrl_isset = YES;
}

- (BOOL) updateUrlIsSet {
  return __updateUrl_isset;
}

- (void) unsetUpdateUrl {
  [__updateUrl release_stub];
  __updateUrl = nil;
  __updateUrl_isset = NO;
}

- (NSString *) cityListUrl {
  return [[__cityListUrl retain_stub] autorelease_stub];
}

- (void) setCityListUrl: (NSString *) cityListUrl {
  [cityListUrl retain_stub];
  [__cityListUrl release_stub];
  __cityListUrl = cityListUrl;
  __cityListUrl_isset = YES;
}

- (BOOL) cityListUrlIsSet {
  return __cityListUrl_isset;
}

- (void) unsetCityListUrl {
  [__cityListUrl release_stub];
  __cityListUrl = nil;
  __cityListUrl_isset = NO;
}

- (NSString *) regionListUrl {
  return [[__regionListUrl retain_stub] autorelease_stub];
}

- (void) setRegionListUrl: (NSString *) regionListUrl {
  [regionListUrl retain_stub];
  [__regionListUrl release_stub];
  __regionListUrl = regionListUrl;
  __regionListUrl_isset = YES;
}

- (BOOL) regionListUrlIsSet {
  return __regionListUrl_isset;
}

- (void) unsetRegionListUrl {
  [__regionListUrl release_stub];
  __regionListUrl = nil;
  __regionListUrl_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMinVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLatestVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUpdateUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCityListUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRegionListUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ServerInfo"];
  if (__minVersion_isset) {
    if (__minVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"minVersion" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __minVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latestVersion_isset) {
    if (__latestVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"latestVersion" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __latestVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updateUrl_isset) {
    if (__updateUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"updateUrl" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __updateUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityListUrl_isset) {
    if (__cityListUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"cityListUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __cityListUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__regionListUrl_isset) {
    if (__regionListUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"regionListUrl" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __regionListUrl];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ServerInfo("];
  [ms appendString: @"minVersion:"];
  [ms appendFormat: @"\"%@\"", __minVersion];
  [ms appendString: @",latestVersion:"];
  [ms appendFormat: @"\"%@\"", __latestVersion];
  [ms appendString: @",updateUrl:"];
  [ms appendFormat: @"\"%@\"", __updateUrl];
  [ms appendString: @",cityListUrl:"];
  [ms appendFormat: @"\"%@\"", __cityListUrl];
  [ms appendString: @",regionListUrl:"];
  [ms appendFormat: @"\"%@\"", __regionListUrl];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation ISevenDaysServiceConstants
+ (void) initialize {
}
@end

@interface Startup_args : NSObject <NSCoding> {
  ClientInfo * __clientInfo;

  BOOL __clientInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=clientInfo, setter=setClientInfo:) ClientInfo * clientInfo;
#endif

- (id) init;
- (id) initWithClientInfo: (ClientInfo *) clientInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ClientInfo *) clientInfo;
- (void) setClientInfo: (ClientInfo *) clientInfo;
#endif
- (BOOL) clientInfoIsSet;

@end

@implementation Startup_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithClientInfo: (ClientInfo *) clientInfo
{
  self = [super init];
  __clientInfo = [clientInfo retain_stub];
  __clientInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"clientInfo"])
  {
    __clientInfo = [[decoder decodeObjectForKey: @"clientInfo"] retain_stub];
    __clientInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__clientInfo_isset)
  {
    [encoder encodeObject: __clientInfo forKey: @"clientInfo"];
  }
}

- (void) dealloc
{
  [__clientInfo release_stub];
  [super dealloc_stub];
}

- (ClientInfo *) clientInfo {
  return [[__clientInfo retain_stub] autorelease_stub];
}

- (void) setClientInfo: (ClientInfo *) clientInfo {
  [clientInfo retain_stub];
  [__clientInfo release_stub];
  __clientInfo = clientInfo;
  __clientInfo_isset = YES;
}

- (BOOL) clientInfoIsSet {
  return __clientInfo_isset;
}

- (void) unsetClientInfo {
  [__clientInfo release_stub];
  __clientInfo = nil;
  __clientInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ClientInfo *fieldValue = [[ClientInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setClientInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Startup_args"];
  if (__clientInfo_isset) {
    if (__clientInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"clientInfo" type: TType_STRUCT fieldID: 1];
      [__clientInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Startup_args("];
  [ms appendString: @"clientInfo:"];
  [ms appendFormat: @"%@", __clientInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Startup_result : NSObject <NSCoding> {
  ServerInfo * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ServerInfo * success;
#endif

- (id) init;
- (id) initWithSuccess: (ServerInfo *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (ServerInfo *) success;
- (void) setSuccess: (ServerInfo *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Startup_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (ServerInfo *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (ServerInfo *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ServerInfo *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          ServerInfo *fieldValue = [[ServerInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Startup_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Startup_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface searchHotel_args : NSObject <NSCoding> {
  SearchRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) SearchRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (SearchRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (SearchRequest *) request;
- (void) setRequest: (SearchRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation searchHotel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (SearchRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (SearchRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (SearchRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          SearchRequest *fieldValue = [[SearchRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"searchHotel_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"searchHotel_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SearchHotel_result : NSObject <NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation SearchHotel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Hotel *_elem2 = [[Hotel alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchHotel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchHotel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getHotelDetails_args : NSObject <NSCoding> {
  HotelRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) HotelRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (HotelRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (HotelRequest *) request;
- (void) setRequest: (HotelRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation getHotelDetails_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (HotelRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (HotelRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (HotelRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          HotelRequest *fieldValue = [[HotelRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getHotelDetails_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getHotelDetails_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetHotelDetails_result : NSObject <NSCoding> {
  Hotel * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Hotel * success;
#endif

- (id) init;
- (id) initWithSuccess: (Hotel *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (Hotel *) success;
- (void) setSuccess: (Hotel *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetHotelDetails_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Hotel *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Hotel *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Hotel *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Hotel *fieldValue = [[Hotel alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHotelDetails_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetHotelDetails_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface bookHotel_args : NSObject <NSCoding> {
  BookingRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) BookingRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (BookingRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (BookingRequest *) request;
- (void) setRequest: (BookingRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation bookHotel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (BookingRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (BookingRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (BookingRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          BookingRequest *fieldValue = [[BookingRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"bookHotel_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"bookHotel_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BookHotel_result : NSObject <NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation BookHotel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Reservation *_elem7 = [[Reservation alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BookHotel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BookHotel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ISevenDaysServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_Startup: (ClientInfo *) clientInfo
{
  [outProtocol writeMessageBeginWithName: @"Startup" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Startup_args"];
  if (clientInfo != nil)  {
    [outProtocol writeFieldBeginWithName: @"clientInfo" type: TType_STRUCT fieldID: 1];
    [clientInfo write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (ServerInfo *) recv_Startup
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Startup_result * result = [[[Startup_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Startup failed: unknown result"];
}

- (ServerInfo *) Startup: (ClientInfo *) clientInfo
{
  [self send_Startup : clientInfo];
  return [self recv_Startup];
}

- (void) send_searchHotel: (SearchRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"searchHotel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"searchHotel_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_searchHotel
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SearchHotel_result * result = [[[SearchHotel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"searchHotel failed: unknown result"];
}

- (NSMutableArray *) searchHotel: (SearchRequest *) request
{
  [self send_searchHotel : request];
  return [self recv_searchHotel];
}

- (void) send_getHotelDetails: (HotelRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"getHotelDetails" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getHotelDetails_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Hotel *) recv_getHotelDetails
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetHotelDetails_result * result = [[[GetHotelDetails_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getHotelDetails failed: unknown result"];
}

- (Hotel *) getHotelDetails: (HotelRequest *) request
{
  [self send_getHotelDetails : request];
  return [self recv_getHotelDetails];
}

- (void) send_bookHotel: (BookingRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"bookHotel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"bookHotel_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_bookHotel
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  BookHotel_result * result = [[[BookHotel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"bookHotel failed: unknown result"];
}

- (NSMutableArray *) bookHotel: (BookingRequest *) request
{
  [self send_bookHotel : request];
  return [self recv_bookHotel];
}

@end

@implementation ISevenDaysServiceProcessor

- (id) initWithISevenDaysService: (id <ISevenDaysService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_Startup_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"Startup"];
  }
  {
    SEL s = @selector(process_searchHotel_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"searchHotel"];
  }
  {
    SEL s = @selector(process_getHotelDetails_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getHotelDetails"];
  }
  {
    SEL s = @selector(process_bookHotel_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"bookHotel"];
  }
  return self;
}

- (id<ISevenDaysService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_Startup_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  Startup_args * args = [[Startup_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Startup_result * result = [[Startup_result alloc] init];
  [result setSuccess: [mService Startup: [args clientInfo]]];
  [outProtocol writeMessageBeginWithName: @"Startup"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_searchHotel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  searchHotel_args * args = [[searchHotel_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  SearchHotel_result * result = [[SearchHotel_result alloc] init];
  [result setSuccess: [mService searchHotel: [args request]]];
  [outProtocol writeMessageBeginWithName: @"searchHotel"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getHotelDetails_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getHotelDetails_args * args = [[getHotelDetails_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetHotelDetails_result * result = [[GetHotelDetails_result alloc] init];
  [result setSuccess: [mService getHotelDetails: [args request]]];
  [outProtocol writeMessageBeginWithName: @"getHotelDetails"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_bookHotel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  bookHotel_args * args = [[bookHotel_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  BookHotel_result * result = [[BookHotel_result alloc] init];
  [result setSuccess: [mService bookHotel: [args request]]];
  [outProtocol writeMessageBeginWithName: @"bookHotel"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

