/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "THotel.h"

@implementation Region

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRegionId: (int32_t) regionId name: (NSString *) name pinyin: (NSString *) pinyin
{
  self = [super init];
  __regionId = regionId;
  __regionId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __pinyin = [pinyin retain_stub];
  __pinyin_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"regionId"])
  {
    __regionId = [decoder decodeInt32ForKey: @"regionId"];
    __regionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"pinyin"])
  {
    __pinyin = [[decoder decodeObjectForKey: @"pinyin"] retain_stub];
    __pinyin_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__regionId_isset)
  {
    [encoder encodeInt32: __regionId forKey: @"regionId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__pinyin_isset)
  {
    [encoder encodeObject: __pinyin forKey: @"pinyin"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__pinyin release_stub];
  [super dealloc_stub];
}

- (int32_t) regionId {
  return __regionId;
}

- (void) setRegionId: (int32_t) regionId {
  __regionId = regionId;
  __regionId_isset = YES;
}

- (BOOL) regionIdIsSet {
  return __regionId_isset;
}

- (void) unsetRegionId {
  __regionId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) pinyin {
  return [[__pinyin retain_stub] autorelease_stub];
}

- (void) setPinyin: (NSString *) pinyin {
  [pinyin retain_stub];
  [__pinyin release_stub];
  __pinyin = pinyin;
  __pinyin_isset = YES;
}

- (BOOL) pinyinIsSet {
  return __pinyin_isset;
}

- (void) unsetPinyin {
  [__pinyin release_stub];
  __pinyin = nil;
  __pinyin_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRegionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPinyin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Region"];
  if (__regionId_isset) {
    [outProtocol writeFieldBeginWithName: @"regionId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __regionId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pinyin_isset) {
    if (__pinyin != nil) {
      [outProtocol writeFieldBeginWithName: @"pinyin" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pinyin];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Region("];
  [ms appendString: @"regionId:"];
  [ms appendFormat: @"%i", __regionId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",pinyin:"];
  [ms appendFormat: @"\"%@\"", __pinyin];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation City

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCityId: (int32_t) cityId name: (NSString *) name pinyin: (NSString *) pinyin region: (NSMutableArray *) region
{
  self = [super init];
  __cityId = cityId;
  __cityId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __pinyin = [pinyin retain_stub];
  __pinyin_isset = YES;
  __region = [region retain_stub];
  __region_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"cityId"])
  {
    __cityId = [decoder decodeInt32ForKey: @"cityId"];
    __cityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"pinyin"])
  {
    __pinyin = [[decoder decodeObjectForKey: @"pinyin"] retain_stub];
    __pinyin_isset = YES;
  }
  if ([decoder containsValueForKey: @"region"])
  {
    __region = [[decoder decodeObjectForKey: @"region"] retain_stub];
    __region_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__cityId_isset)
  {
    [encoder encodeInt32: __cityId forKey: @"cityId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__pinyin_isset)
  {
    [encoder encodeObject: __pinyin forKey: @"pinyin"];
  }
  if (__region_isset)
  {
    [encoder encodeObject: __region forKey: @"region"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__pinyin release_stub];
  [__region release_stub];
  [super dealloc_stub];
}

- (int32_t) cityId {
  return __cityId;
}

- (void) setCityId: (int32_t) cityId {
  __cityId = cityId;
  __cityId_isset = YES;
}

- (BOOL) cityIdIsSet {
  return __cityId_isset;
}

- (void) unsetCityId {
  __cityId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) pinyin {
  return [[__pinyin retain_stub] autorelease_stub];
}

- (void) setPinyin: (NSString *) pinyin {
  [pinyin retain_stub];
  [__pinyin release_stub];
  __pinyin = pinyin;
  __pinyin_isset = YES;
}

- (BOOL) pinyinIsSet {
  return __pinyin_isset;
}

- (void) unsetPinyin {
  [__pinyin release_stub];
  __pinyin = nil;
  __pinyin_isset = NO;
}

- (NSMutableArray *) region {
  return [[__region retain_stub] autorelease_stub];
}

- (void) setRegion: (NSMutableArray *) region {
  [region retain_stub];
  [__region release_stub];
  __region = region;
  __region_isset = YES;
}

- (BOOL) regionIsSet {
  return __region_isset;
}

- (void) unsetRegion {
  [__region release_stub];
  __region = nil;
  __region_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPinyin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Region *_elem2 = [[Region alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setRegion: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"City"];
  if (__cityId_isset) {
    [outProtocol writeFieldBeginWithName: @"cityId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __cityId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pinyin_isset) {
    if (__pinyin != nil) {
      [outProtocol writeFieldBeginWithName: @"pinyin" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pinyin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__region_isset) {
    if (__region != nil) {
      [outProtocol writeFieldBeginWithName: @"region" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__region count]];
        int i4;
        for (i4 = 0; i4 < [__region count]; i4++)
        {
          [[__region objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"City("];
  [ms appendString: @"cityId:"];
  [ms appendFormat: @"%i", __cityId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",pinyin:"];
  [ms appendFormat: @"\"%@\"", __pinyin];
  [ms appendString: @",region:"];
  [ms appendFormat: @"%@", __region];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Image

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUrl: (NSString *) url
{
  self = [super init];
  __url = [url retain_stub];
  __url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
}

- (void) dealloc
{
  [__url release_stub];
  [super dealloc_stub];
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Image"];
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Image("];
  [ms appendString: @"url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Room

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRooomId: (int32_t) rooomId name: (NSString *) name price: (double) price vacant: (BOOL) vacant
{
  self = [super init];
  __rooomId = rooomId;
  __rooomId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __price = price;
  __price_isset = YES;
  __vacant = vacant;
  __vacant_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"rooomId"])
  {
    __rooomId = [decoder decodeInt32ForKey: @"rooomId"];
    __rooomId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [decoder decodeDoubleForKey: @"price"];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"vacant"])
  {
    __vacant = [decoder decodeBoolForKey: @"vacant"];
    __vacant_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__rooomId_isset)
  {
    [encoder encodeInt32: __rooomId forKey: @"rooomId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__price_isset)
  {
    [encoder encodeDouble: __price forKey: @"price"];
  }
  if (__vacant_isset)
  {
    [encoder encodeBool: __vacant forKey: @"vacant"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) rooomId {
  return __rooomId;
}

- (void) setRooomId: (int32_t) rooomId {
  __rooomId = rooomId;
  __rooomId_isset = YES;
}

- (BOOL) rooomIdIsSet {
  return __rooomId_isset;
}

- (void) unsetRooomId {
  __rooomId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) price {
  return __price;
}

- (void) setPrice: (double) price {
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  __price_isset = NO;
}

- (BOOL) vacant {
  return __vacant;
}

- (void) setVacant: (BOOL) vacant {
  __vacant = vacant;
  __vacant_isset = YES;
}

- (BOOL) vacantIsSet {
  return __vacant_isset;
}

- (void) unsetVacant {
  __vacant_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRooomId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setVacant: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Room"];
  if (__rooomId_isset) {
    [outProtocol writeFieldBeginWithName: @"rooomId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __rooomId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__price_isset) {
    [outProtocol writeFieldBeginWithName: @"price" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __price];
    [outProtocol writeFieldEnd];
  }
  if (__vacant_isset) {
    [outProtocol writeFieldBeginWithName: @"vacant" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __vacant];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Room("];
  [ms appendString: @"rooomId:"];
  [ms appendFormat: @"%i", __rooomId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",price:"];
  [ms appendFormat: @"%f", __price];
  [ms appendString: @",vacant:"];
  [ms appendFormat: @"%i", __vacant];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Supply

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSupplyId: (int32_t) supplyId name: (NSString *) name quantifier: (NSString *) quantifier onlinePrice: (int32_t) onlinePrice price: (int32_t) price
{
  self = [super init];
  __supplyId = supplyId;
  __supplyId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __quantifier = [quantifier retain_stub];
  __quantifier_isset = YES;
  __onlinePrice = onlinePrice;
  __onlinePrice_isset = YES;
  __price = price;
  __price_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"supplyId"])
  {
    __supplyId = [decoder decodeInt32ForKey: @"supplyId"];
    __supplyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"quantifier"])
  {
    __quantifier = [[decoder decodeObjectForKey: @"quantifier"] retain_stub];
    __quantifier_isset = YES;
  }
  if ([decoder containsValueForKey: @"onlinePrice"])
  {
    __onlinePrice = [decoder decodeInt32ForKey: @"onlinePrice"];
    __onlinePrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [decoder decodeInt32ForKey: @"price"];
    __price_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__supplyId_isset)
  {
    [encoder encodeInt32: __supplyId forKey: @"supplyId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__quantifier_isset)
  {
    [encoder encodeObject: __quantifier forKey: @"quantifier"];
  }
  if (__onlinePrice_isset)
  {
    [encoder encodeInt32: __onlinePrice forKey: @"onlinePrice"];
  }
  if (__price_isset)
  {
    [encoder encodeInt32: __price forKey: @"price"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__quantifier release_stub];
  [super dealloc_stub];
}

- (int32_t) supplyId {
  return __supplyId;
}

- (void) setSupplyId: (int32_t) supplyId {
  __supplyId = supplyId;
  __supplyId_isset = YES;
}

- (BOOL) supplyIdIsSet {
  return __supplyId_isset;
}

- (void) unsetSupplyId {
  __supplyId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) quantifier {
  return [[__quantifier retain_stub] autorelease_stub];
}

- (void) setQuantifier: (NSString *) quantifier {
  [quantifier retain_stub];
  [__quantifier release_stub];
  __quantifier = quantifier;
  __quantifier_isset = YES;
}

- (BOOL) quantifierIsSet {
  return __quantifier_isset;
}

- (void) unsetQuantifier {
  [__quantifier release_stub];
  __quantifier = nil;
  __quantifier_isset = NO;
}

- (int32_t) onlinePrice {
  return __onlinePrice;
}

- (void) setOnlinePrice: (int32_t) onlinePrice {
  __onlinePrice = onlinePrice;
  __onlinePrice_isset = YES;
}

- (BOOL) onlinePriceIsSet {
  return __onlinePrice_isset;
}

- (void) unsetOnlinePrice {
  __onlinePrice_isset = NO;
}

- (int32_t) price {
  return __price;
}

- (void) setPrice: (int32_t) price {
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  __price_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSupplyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQuantifier: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOnlinePrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Supply"];
  if (__supplyId_isset) {
    [outProtocol writeFieldBeginWithName: @"supplyId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __supplyId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__quantifier_isset) {
    if (__quantifier != nil) {
      [outProtocol writeFieldBeginWithName: @"quantifier" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __quantifier];
      [outProtocol writeFieldEnd];
    }
  }
  if (__onlinePrice_isset) {
    [outProtocol writeFieldBeginWithName: @"onlinePrice" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __onlinePrice];
    [outProtocol writeFieldEnd];
  }
  if (__price_isset) {
    [outProtocol writeFieldBeginWithName: @"price" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __price];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Supply("];
  [ms appendString: @"supplyId:"];
  [ms appendFormat: @"%i", __supplyId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",quantifier:"];
  [ms appendFormat: @"\"%@\"", __quantifier];
  [ms appendString: @",onlinePrice:"];
  [ms appendFormat: @"%i", __onlinePrice];
  [ms appendString: @",price:"];
  [ms appendFormat: @"%i", __price];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Hotel

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHotelId: (int32_t) hotelId name: (NSString *) name phone: (NSString *) phone address: (NSString *) address latitude: (double) latitude longitude: (double) longitude vacant: (BOOL) vacant price: (double) price coverImage: (Image *) coverImage image: (NSMutableArray *) image introduction: (NSString *) introduction rooms: (NSMutableArray *) rooms supplies: (NSMutableArray *) supplies
{
  self = [super init];
  __hotelId = hotelId;
  __hotelId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __address = [address retain_stub];
  __address_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __vacant = vacant;
  __vacant_isset = YES;
  __price = price;
  __price_isset = YES;
  __coverImage = [coverImage retain_stub];
  __coverImage_isset = YES;
  __image = [image retain_stub];
  __image_isset = YES;
  __introduction = [introduction retain_stub];
  __introduction_isset = YES;
  __rooms = [rooms retain_stub];
  __rooms_isset = YES;
  __supplies = [supplies retain_stub];
  __supplies_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hotelId"])
  {
    __hotelId = [decoder decodeInt32ForKey: @"hotelId"];
    __hotelId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"address"])
  {
    __address = [[decoder decodeObjectForKey: @"address"] retain_stub];
    __address_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"vacant"])
  {
    __vacant = [decoder decodeBoolForKey: @"vacant"];
    __vacant_isset = YES;
  }
  if ([decoder containsValueForKey: @"price"])
  {
    __price = [decoder decodeDoubleForKey: @"price"];
    __price_isset = YES;
  }
  if ([decoder containsValueForKey: @"coverImage"])
  {
    __coverImage = [[decoder decodeObjectForKey: @"coverImage"] retain_stub];
    __coverImage_isset = YES;
  }
  if ([decoder containsValueForKey: @"image"])
  {
    __image = [[decoder decodeObjectForKey: @"image"] retain_stub];
    __image_isset = YES;
  }
  if ([decoder containsValueForKey: @"introduction"])
  {
    __introduction = [[decoder decodeObjectForKey: @"introduction"] retain_stub];
    __introduction_isset = YES;
  }
  if ([decoder containsValueForKey: @"rooms"])
  {
    __rooms = [[decoder decodeObjectForKey: @"rooms"] retain_stub];
    __rooms_isset = YES;
  }
  if ([decoder containsValueForKey: @"supplies"])
  {
    __supplies = [[decoder decodeObjectForKey: @"supplies"] retain_stub];
    __supplies_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hotelId_isset)
  {
    [encoder encodeInt32: __hotelId forKey: @"hotelId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__address_isset)
  {
    [encoder encodeObject: __address forKey: @"address"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__vacant_isset)
  {
    [encoder encodeBool: __vacant forKey: @"vacant"];
  }
  if (__price_isset)
  {
    [encoder encodeDouble: __price forKey: @"price"];
  }
  if (__coverImage_isset)
  {
    [encoder encodeObject: __coverImage forKey: @"coverImage"];
  }
  if (__image_isset)
  {
    [encoder encodeObject: __image forKey: @"image"];
  }
  if (__introduction_isset)
  {
    [encoder encodeObject: __introduction forKey: @"introduction"];
  }
  if (__rooms_isset)
  {
    [encoder encodeObject: __rooms forKey: @"rooms"];
  }
  if (__supplies_isset)
  {
    [encoder encodeObject: __supplies forKey: @"supplies"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__phone release_stub];
  [__address release_stub];
  [__coverImage release_stub];
  [__image release_stub];
  [__introduction release_stub];
  [__rooms release_stub];
  [__supplies release_stub];
  [super dealloc_stub];
}

- (int32_t) hotelId {
  return __hotelId;
}

- (void) setHotelId: (int32_t) hotelId {
  __hotelId = hotelId;
  __hotelId_isset = YES;
}

- (BOOL) hotelIdIsSet {
  return __hotelId_isset;
}

- (void) unsetHotelId {
  __hotelId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (NSString *) address {
  return [[__address retain_stub] autorelease_stub];
}

- (void) setAddress: (NSString *) address {
  [address retain_stub];
  [__address release_stub];
  __address = address;
  __address_isset = YES;
}

- (BOOL) addressIsSet {
  return __address_isset;
}

- (void) unsetAddress {
  [__address release_stub];
  __address = nil;
  __address_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (BOOL) vacant {
  return __vacant;
}

- (void) setVacant: (BOOL) vacant {
  __vacant = vacant;
  __vacant_isset = YES;
}

- (BOOL) vacantIsSet {
  return __vacant_isset;
}

- (void) unsetVacant {
  __vacant_isset = NO;
}

- (double) price {
  return __price;
}

- (void) setPrice: (double) price {
  __price = price;
  __price_isset = YES;
}

- (BOOL) priceIsSet {
  return __price_isset;
}

- (void) unsetPrice {
  __price_isset = NO;
}

- (Image *) coverImage {
  return [[__coverImage retain_stub] autorelease_stub];
}

- (void) setCoverImage: (Image *) coverImage {
  [coverImage retain_stub];
  [__coverImage release_stub];
  __coverImage = coverImage;
  __coverImage_isset = YES;
}

- (BOOL) coverImageIsSet {
  return __coverImage_isset;
}

- (void) unsetCoverImage {
  [__coverImage release_stub];
  __coverImage = nil;
  __coverImage_isset = NO;
}

- (NSMutableArray *) image {
  return [[__image retain_stub] autorelease_stub];
}

- (void) setImage: (NSMutableArray *) image {
  [image retain_stub];
  [__image release_stub];
  __image = image;
  __image_isset = YES;
}

- (BOOL) imageIsSet {
  return __image_isset;
}

- (void) unsetImage {
  [__image release_stub];
  __image = nil;
  __image_isset = NO;
}

- (NSString *) introduction {
  return [[__introduction retain_stub] autorelease_stub];
}

- (void) setIntroduction: (NSString *) introduction {
  [introduction retain_stub];
  [__introduction release_stub];
  __introduction = introduction;
  __introduction_isset = YES;
}

- (BOOL) introductionIsSet {
  return __introduction_isset;
}

- (void) unsetIntroduction {
  [__introduction release_stub];
  __introduction = nil;
  __introduction_isset = NO;
}

- (NSMutableArray *) rooms {
  return [[__rooms retain_stub] autorelease_stub];
}

- (void) setRooms: (NSMutableArray *) rooms {
  [rooms retain_stub];
  [__rooms release_stub];
  __rooms = rooms;
  __rooms_isset = YES;
}

- (BOOL) roomsIsSet {
  return __rooms_isset;
}

- (void) unsetRooms {
  [__rooms release_stub];
  __rooms = nil;
  __rooms_isset = NO;
}

- (NSMutableArray *) supplies {
  return [[__supplies retain_stub] autorelease_stub];
}

- (void) setSupplies: (NSMutableArray *) supplies {
  [supplies retain_stub];
  [__supplies release_stub];
  __supplies = supplies;
  __supplies_isset = YES;
}

- (BOOL) suppliesIsSet {
  return __supplies_isset;
}

- (void) unsetSupplies {
  [__supplies release_stub];
  __supplies = nil;
  __supplies_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHotelId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setVacant: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          Image *fieldValue = [[Image alloc] init];
          [fieldValue read: inProtocol];
          [self setCoverImage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            Image *_elem7 = [[Image alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setImage: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntroduction: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            Room *_elem10 = [[Room alloc] init];
            [_elem10 read: inProtocol];
            [fieldValue addObject: _elem10];
            [_elem10 release_stub];
          }
          [inProtocol readListEnd];
          [self setRooms: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            Supply *_elem13 = [[Supply alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
            [_elem13 release_stub];
          }
          [inProtocol readListEnd];
          [self setSupplies: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Hotel"];
  if (__hotelId_isset) {
    [outProtocol writeFieldBeginWithName: @"hotelId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __hotelId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__address_isset) {
    if (__address != nil) {
      [outProtocol writeFieldBeginWithName: @"address" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __address];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__vacant_isset) {
    [outProtocol writeFieldBeginWithName: @"vacant" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __vacant];
    [outProtocol writeFieldEnd];
  }
  if (__price_isset) {
    [outProtocol writeFieldBeginWithName: @"price" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __price];
    [outProtocol writeFieldEnd];
  }
  if (__coverImage_isset) {
    if (__coverImage != nil) {
      [outProtocol writeFieldBeginWithName: @"coverImage" type: TType_STRUCT fieldID: 9];
      [__coverImage write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__image_isset) {
    if (__image != nil) {
      [outProtocol writeFieldBeginWithName: @"image" type: TType_LIST fieldID: 10];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__image count]];
        int i15;
        for (i15 = 0; i15 < [__image count]; i15++)
        {
          [[__image objectAtIndex: i15] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__introduction_isset) {
    if (__introduction != nil) {
      [outProtocol writeFieldBeginWithName: @"introduction" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __introduction];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rooms_isset) {
    if (__rooms != nil) {
      [outProtocol writeFieldBeginWithName: @"rooms" type: TType_LIST fieldID: 12];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__rooms count]];
        int i17;
        for (i17 = 0; i17 < [__rooms count]; i17++)
        {
          [[__rooms objectAtIndex: i17] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__supplies_isset) {
    if (__supplies != nil) {
      [outProtocol writeFieldBeginWithName: @"supplies" type: TType_LIST fieldID: 13];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__supplies count]];
        int i19;
        for (i19 = 0; i19 < [__supplies count]; i19++)
        {
          [[__supplies objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Hotel("];
  [ms appendString: @"hotelId:"];
  [ms appendFormat: @"%i", __hotelId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",address:"];
  [ms appendFormat: @"\"%@\"", __address];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",vacant:"];
  [ms appendFormat: @"%i", __vacant];
  [ms appendString: @",price:"];
  [ms appendFormat: @"%f", __price];
  [ms appendString: @",coverImage:"];
  [ms appendFormat: @"%@", __coverImage];
  [ms appendString: @",image:"];
  [ms appendFormat: @"%@", __image];
  [ms appendString: @",introduction:"];
  [ms appendFormat: @"\"%@\"", __introduction];
  [ms appendString: @",rooms:"];
  [ms appendFormat: @"%@", __rooms];
  [ms appendString: @",supplies:"];
  [ms appendFormat: @"%@", __supplies];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCityId: (int32_t) cityId regionId: (int32_t) regionId keyword: (NSString *) keyword checkinTime: (int64_t) checkinTime checkoutTime: (int64_t) checkoutTime latitude: (double) latitude longitude: (double) longitude radius: (double) radius pageIndex: (int32_t) pageIndex pageSize: (int32_t) pageSize sortBy: (int32_t) sortBy
{
  self = [super init];
  __cityId = cityId;
  __cityId_isset = YES;
  __regionId = regionId;
  __regionId_isset = YES;
  __keyword = [keyword retain_stub];
  __keyword_isset = YES;
  __checkinTime = checkinTime;
  __checkinTime_isset = YES;
  __checkoutTime = checkoutTime;
  __checkoutTime_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __radius = radius;
  __radius_isset = YES;
  __pageIndex = pageIndex;
  __pageIndex_isset = YES;
  __pageSize = pageSize;
  __pageSize_isset = YES;
  __sortBy = sortBy;
  __sortBy_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"cityId"])
  {
    __cityId = [decoder decodeInt32ForKey: @"cityId"];
    __cityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"regionId"])
  {
    __regionId = [decoder decodeInt32ForKey: @"regionId"];
    __regionId_isset = YES;
  }
  if ([decoder containsValueForKey: @"keyword"])
  {
    __keyword = [[decoder decodeObjectForKey: @"keyword"] retain_stub];
    __keyword_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkinTime"])
  {
    __checkinTime = [decoder decodeInt64ForKey: @"checkinTime"];
    __checkinTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkoutTime"])
  {
    __checkoutTime = [decoder decodeInt64ForKey: @"checkoutTime"];
    __checkoutTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"radius"])
  {
    __radius = [decoder decodeDoubleForKey: @"radius"];
    __radius_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageIndex"])
  {
    __pageIndex = [decoder decodeInt32ForKey: @"pageIndex"];
    __pageIndex_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageSize"])
  {
    __pageSize = [decoder decodeInt32ForKey: @"pageSize"];
    __pageSize_isset = YES;
  }
  if ([decoder containsValueForKey: @"sortBy"])
  {
    __sortBy = [decoder decodeInt32ForKey: @"sortBy"];
    __sortBy_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__cityId_isset)
  {
    [encoder encodeInt32: __cityId forKey: @"cityId"];
  }
  if (__regionId_isset)
  {
    [encoder encodeInt32: __regionId forKey: @"regionId"];
  }
  if (__keyword_isset)
  {
    [encoder encodeObject: __keyword forKey: @"keyword"];
  }
  if (__checkinTime_isset)
  {
    [encoder encodeInt64: __checkinTime forKey: @"checkinTime"];
  }
  if (__checkoutTime_isset)
  {
    [encoder encodeInt64: __checkoutTime forKey: @"checkoutTime"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__radius_isset)
  {
    [encoder encodeDouble: __radius forKey: @"radius"];
  }
  if (__pageIndex_isset)
  {
    [encoder encodeInt32: __pageIndex forKey: @"pageIndex"];
  }
  if (__pageSize_isset)
  {
    [encoder encodeInt32: __pageSize forKey: @"pageSize"];
  }
  if (__sortBy_isset)
  {
    [encoder encodeInt32: __sortBy forKey: @"sortBy"];
  }
}

- (void) dealloc
{
  [__keyword release_stub];
  [super dealloc_stub];
}

- (int32_t) cityId {
  return __cityId;
}

- (void) setCityId: (int32_t) cityId {
  __cityId = cityId;
  __cityId_isset = YES;
}

- (BOOL) cityIdIsSet {
  return __cityId_isset;
}

- (void) unsetCityId {
  __cityId_isset = NO;
}

- (int32_t) regionId {
  return __regionId;
}

- (void) setRegionId: (int32_t) regionId {
  __regionId = regionId;
  __regionId_isset = YES;
}

- (BOOL) regionIdIsSet {
  return __regionId_isset;
}

- (void) unsetRegionId {
  __regionId_isset = NO;
}

- (NSString *) keyword {
  return [[__keyword retain_stub] autorelease_stub];
}

- (void) setKeyword: (NSString *) keyword {
  [keyword retain_stub];
  [__keyword release_stub];
  __keyword = keyword;
  __keyword_isset = YES;
}

- (BOOL) keywordIsSet {
  return __keyword_isset;
}

- (void) unsetKeyword {
  [__keyword release_stub];
  __keyword = nil;
  __keyword_isset = NO;
}

- (int64_t) checkinTime {
  return __checkinTime;
}

- (void) setCheckinTime: (int64_t) checkinTime {
  __checkinTime = checkinTime;
  __checkinTime_isset = YES;
}

- (BOOL) checkinTimeIsSet {
  return __checkinTime_isset;
}

- (void) unsetCheckinTime {
  __checkinTime_isset = NO;
}

- (int64_t) checkoutTime {
  return __checkoutTime;
}

- (void) setCheckoutTime: (int64_t) checkoutTime {
  __checkoutTime = checkoutTime;
  __checkoutTime_isset = YES;
}

- (BOOL) checkoutTimeIsSet {
  return __checkoutTime_isset;
}

- (void) unsetCheckoutTime {
  __checkoutTime_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) radius {
  return __radius;
}

- (void) setRadius: (double) radius {
  __radius = radius;
  __radius_isset = YES;
}

- (BOOL) radiusIsSet {
  return __radius_isset;
}

- (void) unsetRadius {
  __radius_isset = NO;
}

- (int32_t) pageIndex {
  return __pageIndex;
}

- (void) setPageIndex: (int32_t) pageIndex {
  __pageIndex = pageIndex;
  __pageIndex_isset = YES;
}

- (BOOL) pageIndexIsSet {
  return __pageIndex_isset;
}

- (void) unsetPageIndex {
  __pageIndex_isset = NO;
}

- (int32_t) pageSize {
  return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
  __pageSize = pageSize;
  __pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
  return __pageSize_isset;
}

- (void) unsetPageSize {
  __pageSize_isset = NO;
}

- (int32_t) sortBy {
  return __sortBy;
}

- (void) setSortBy: (int32_t) sortBy {
  __sortBy = sortBy;
  __sortBy_isset = YES;
}

- (BOOL) sortByIsSet {
  return __sortBy_isset;
}

- (void) unsetSortBy {
  __sortBy_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRegionId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKeyword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCheckinTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCheckoutTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setRadius: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSortBy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchRequest"];
  if (__cityId_isset) {
    [outProtocol writeFieldBeginWithName: @"cityId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __cityId];
    [outProtocol writeFieldEnd];
  }
  if (__regionId_isset) {
    [outProtocol writeFieldBeginWithName: @"regionId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __regionId];
    [outProtocol writeFieldEnd];
  }
  if (__keyword_isset) {
    if (__keyword != nil) {
      [outProtocol writeFieldBeginWithName: @"keyword" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __keyword];
      [outProtocol writeFieldEnd];
    }
  }
  if (__checkinTime_isset) {
    [outProtocol writeFieldBeginWithName: @"checkinTime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __checkinTime];
    [outProtocol writeFieldEnd];
  }
  if (__checkoutTime_isset) {
    [outProtocol writeFieldBeginWithName: @"checkoutTime" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __checkoutTime];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 7];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__radius_isset) {
    [outProtocol writeFieldBeginWithName: @"radius" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __radius];
    [outProtocol writeFieldEnd];
  }
  if (__pageIndex_isset) {
    [outProtocol writeFieldBeginWithName: @"pageIndex" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __pageIndex];
    [outProtocol writeFieldEnd];
  }
  if (__pageSize_isset) {
    [outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __pageSize];
    [outProtocol writeFieldEnd];
  }
  if (__sortBy_isset) {
    [outProtocol writeFieldBeginWithName: @"sortBy" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __sortBy];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchRequest("];
  [ms appendString: @"cityId:"];
  [ms appendFormat: @"%i", __cityId];
  [ms appendString: @",regionId:"];
  [ms appendFormat: @"%i", __regionId];
  [ms appendString: @",keyword:"];
  [ms appendFormat: @"\"%@\"", __keyword];
  [ms appendString: @",checkinTime:"];
  [ms appendFormat: @"%qi", __checkinTime];
  [ms appendString: @",checkoutTime:"];
  [ms appendFormat: @"%qi", __checkoutTime];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",radius:"];
  [ms appendFormat: @"%f", __radius];
  [ms appendString: @",pageIndex:"];
  [ms appendFormat: @"%i", __pageIndex];
  [ms appendString: @",pageSize:"];
  [ms appendFormat: @"%i", __pageSize];
  [ms appendString: @",sortBy:"];
  [ms appendFormat: @"%i", __sortBy];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HotelRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHotelId: (int32_t) hotelId checkinTime: (int64_t) checkinTime checkoutTime: (int64_t) checkoutTime
{
  self = [super init];
  __hotelId = hotelId;
  __hotelId_isset = YES;
  __checkinTime = checkinTime;
  __checkinTime_isset = YES;
  __checkoutTime = checkoutTime;
  __checkoutTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"hotelId"])
  {
    __hotelId = [decoder decodeInt32ForKey: @"hotelId"];
    __hotelId_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkinTime"])
  {
    __checkinTime = [decoder decodeInt64ForKey: @"checkinTime"];
    __checkinTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"checkoutTime"])
  {
    __checkoutTime = [decoder decodeInt64ForKey: @"checkoutTime"];
    __checkoutTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__hotelId_isset)
  {
    [encoder encodeInt32: __hotelId forKey: @"hotelId"];
  }
  if (__checkinTime_isset)
  {
    [encoder encodeInt64: __checkinTime forKey: @"checkinTime"];
  }
  if (__checkoutTime_isset)
  {
    [encoder encodeInt64: __checkoutTime forKey: @"checkoutTime"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) hotelId {
  return __hotelId;
}

- (void) setHotelId: (int32_t) hotelId {
  __hotelId = hotelId;
  __hotelId_isset = YES;
}

- (BOOL) hotelIdIsSet {
  return __hotelId_isset;
}

- (void) unsetHotelId {
  __hotelId_isset = NO;
}

- (int64_t) checkinTime {
  return __checkinTime;
}

- (void) setCheckinTime: (int64_t) checkinTime {
  __checkinTime = checkinTime;
  __checkinTime_isset = YES;
}

- (BOOL) checkinTimeIsSet {
  return __checkinTime_isset;
}

- (void) unsetCheckinTime {
  __checkinTime_isset = NO;
}

- (int64_t) checkoutTime {
  return __checkoutTime;
}

- (void) setCheckoutTime: (int64_t) checkoutTime {
  __checkoutTime = checkoutTime;
  __checkoutTime_isset = YES;
}

- (BOOL) checkoutTimeIsSet {
  return __checkoutTime_isset;
}

- (void) unsetCheckoutTime {
  __checkoutTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setHotelId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCheckinTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCheckoutTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HotelRequest"];
  if (__hotelId_isset) {
    [outProtocol writeFieldBeginWithName: @"hotelId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __hotelId];
    [outProtocol writeFieldEnd];
  }
  if (__checkinTime_isset) {
    [outProtocol writeFieldBeginWithName: @"checkinTime" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __checkinTime];
    [outProtocol writeFieldEnd];
  }
  if (__checkoutTime_isset) {
    [outProtocol writeFieldBeginWithName: @"checkoutTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __checkoutTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HotelRequest("];
  [ms appendString: @"hotelId:"];
  [ms appendFormat: @"%i", __hotelId];
  [ms appendString: @",checkinTime:"];
  [ms appendFormat: @"%qi", __checkinTime];
  [ms appendString: @",checkoutTime:"];
  [ms appendFormat: @"%qi", __checkoutTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation THotelConstants
+ (void) initialize {
}
@end

