/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "TMember.h"

@implementation Member

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMemberId: (int64_t) memberId name: (NSString *) name phone: (NSString *) phone email: (NSString *) email
{
  self = [super init];
  __memberId = memberId;
  __memberId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"memberId"])
  {
    __memberId = [decoder decodeInt64ForKey: @"memberId"];
    __memberId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__memberId_isset)
  {
    [encoder encodeInt64: __memberId forKey: @"memberId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__phone release_stub];
  [__email release_stub];
  [super dealloc_stub];
}

- (int64_t) memberId {
  return __memberId;
}

- (void) setMemberId: (int64_t) memberId {
  __memberId = memberId;
  __memberId_isset = YES;
}

- (BOOL) memberIdIsSet {
  return __memberId_isset;
}

- (void) unsetMemberId {
  __memberId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMemberId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Member"];
  if (__memberId_isset) {
    [outProtocol writeFieldBeginWithName: @"memberId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __memberId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Member("];
  [ms appendString: @"memberId:"];
  [ms appendFormat: @"%qi", __memberId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Asserts

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPoint: (int32_t) point
{
  self = [super init];
  __point = point;
  __point_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"point"])
  {
    __point = [decoder decodeInt32ForKey: @"point"];
    __point_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__point_isset)
  {
    [encoder encodeInt32: __point forKey: @"point"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) point {
  return __point;
}

- (void) setPoint: (int32_t) point {
  __point = point;
  __point_isset = YES;
}

- (BOOL) pointIsSet {
  return __point_isset;
}

- (void) unsetPoint {
  __point_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPoint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Asserts"];
  if (__point_isset) {
    [outProtocol writeFieldBeginWithName: @"point" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __point];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Asserts("];
  [ms appendString: @"point:"];
  [ms appendFormat: @"%i", __point];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation TMemberConstants
+ (void) initialize {
}
@end

