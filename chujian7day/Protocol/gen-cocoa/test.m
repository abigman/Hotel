/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "test.h"

@implementation Message

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithText: (NSString *) text date: (NSString *) date
{
  self = [super init];
  __text = [text retain_stub];
  __text_isset = YES;
  __date = [date retain_stub];
  __date_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain_stub];
    __text_isset = YES;
  }
  if ([decoder containsValueForKey: @"date"])
  {
    __date = [[decoder decodeObjectForKey: @"date"] retain_stub];
    __date_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
  if (__date_isset)
  {
    [encoder encodeObject: __date forKey: @"date"];
  }
}

- (void) dealloc
{
  [__text release_stub];
  [__date release_stub];
  [super dealloc_stub];
}

- (NSString *) text {
  return [[__text retain_stub] autorelease_stub];
}

- (void) setText: (NSString *) text {
  [text retain_stub];
  [__text release_stub];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release_stub];
  __text = nil;
  __text_isset = NO;
}

- (NSString *) date {
  return [[__date retain_stub] autorelease_stub];
}

- (void) setDate: (NSString *) date {
  [date retain_stub];
  [__date release_stub];
  __date = date;
  __date_isset = YES;
}

- (BOOL) dateIsSet {
  return __date_isset;
}

- (void) unsetDate {
  [__date release_stub];
  __date = nil;
  __date_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Message"];
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__date_isset) {
    if (__date != nil) {
      [outProtocol writeFieldBeginWithName: @"date" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __date];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Message("];
  [ms appendString: @"text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @",date:"];
  [ms appendFormat: @"\"%@\"", __date];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation testConstants
+ (void) initialize {
}
@end

