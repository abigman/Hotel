/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"


#import "TMember.h"

@implementation Member

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMemberId: (int64_t) memberId name: (NSString *) name birthday: (NSString *) birthday idCard: (NSString *) idCard memberCard: (NSString *) memberCard phone: (NSString *) phone phoneVerified: (BOOL) phoneVerified email: (NSString *) email level: (NSString *) level isMale: (BOOL) isMale memberType: (int32_t) memberType isPayTrain: (BOOL) isPayTrain
{
  self = [super init];
  __memberId = memberId;
  __memberId_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __birthday = [birthday retain_stub];
  __birthday_isset = YES;
  __idCard = [idCard retain_stub];
  __idCard_isset = YES;
  __memberCard = [memberCard retain_stub];
  __memberCard_isset = YES;
  __phone = [phone retain_stub];
  __phone_isset = YES;
  __phoneVerified = phoneVerified;
  __phoneVerified_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __level = [level retain_stub];
  __level_isset = YES;
  __isMale = isMale;
  __isMale_isset = YES;
  __memberType = memberType;
  __memberType_isset = YES;
  __isPayTrain = isPayTrain;
  __isPayTrain_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"memberId"])
  {
    __memberId = [decoder decodeInt64ForKey: @"memberId"];
    __memberId_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"birthday"])
  {
    __birthday = [[decoder decodeObjectForKey: @"birthday"] retain_stub];
    __birthday_isset = YES;
  }
  if ([decoder containsValueForKey: @"idCard"])
  {
    __idCard = [[decoder decodeObjectForKey: @"idCard"] retain_stub];
    __idCard_isset = YES;
  }
  if ([decoder containsValueForKey: @"memberCard"])
  {
    __memberCard = [[decoder decodeObjectForKey: @"memberCard"] retain_stub];
    __memberCard_isset = YES;
  }
  if ([decoder containsValueForKey: @"phone"])
  {
    __phone = [[decoder decodeObjectForKey: @"phone"] retain_stub];
    __phone_isset = YES;
  }
  if ([decoder containsValueForKey: @"phoneVerified"])
  {
    __phoneVerified = [decoder decodeBoolForKey: @"phoneVerified"];
    __phoneVerified_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"level"])
  {
    __level = [[decoder decodeObjectForKey: @"level"] retain_stub];
    __level_isset = YES;
  }
  if ([decoder containsValueForKey: @"isMale"])
  {
    __isMale = [decoder decodeBoolForKey: @"isMale"];
    __isMale_isset = YES;
  }
  if ([decoder containsValueForKey: @"memberType"])
  {
    __memberType = [decoder decodeInt32ForKey: @"memberType"];
    __memberType_isset = YES;
  }
  if ([decoder containsValueForKey: @"isPayTrain"])
  {
    __isPayTrain = [decoder decodeBoolForKey: @"isPayTrain"];
    __isPayTrain_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__memberId_isset)
  {
    [encoder encodeInt64: __memberId forKey: @"memberId"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__birthday_isset)
  {
    [encoder encodeObject: __birthday forKey: @"birthday"];
  }
  if (__idCard_isset)
  {
    [encoder encodeObject: __idCard forKey: @"idCard"];
  }
  if (__memberCard_isset)
  {
    [encoder encodeObject: __memberCard forKey: @"memberCard"];
  }
  if (__phone_isset)
  {
    [encoder encodeObject: __phone forKey: @"phone"];
  }
  if (__phoneVerified_isset)
  {
    [encoder encodeBool: __phoneVerified forKey: @"phoneVerified"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__level_isset)
  {
    [encoder encodeObject: __level forKey: @"level"];
  }
  if (__isMale_isset)
  {
    [encoder encodeBool: __isMale forKey: @"isMale"];
  }
  if (__memberType_isset)
  {
    [encoder encodeInt32: __memberType forKey: @"memberType"];
  }
  if (__isPayTrain_isset)
  {
    [encoder encodeBool: __isPayTrain forKey: @"isPayTrain"];
  }
}

- (void) dealloc
{
  [__name release_stub];
  [__birthday release_stub];
  [__idCard release_stub];
  [__memberCard release_stub];
  [__phone release_stub];
  [__email release_stub];
  [__level release_stub];
  [super dealloc_stub];
}

- (int64_t) memberId {
  return __memberId;
}

- (void) setMemberId: (int64_t) memberId {
  __memberId = memberId;
  __memberId_isset = YES;
}

- (BOOL) memberIdIsSet {
  return __memberId_isset;
}

- (void) unsetMemberId {
  __memberId_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) birthday {
  return [[__birthday retain_stub] autorelease_stub];
}

- (void) setBirthday: (NSString *) birthday {
  [birthday retain_stub];
  [__birthday release_stub];
  __birthday = birthday;
  __birthday_isset = YES;
}

- (BOOL) birthdayIsSet {
  return __birthday_isset;
}

- (void) unsetBirthday {
  [__birthday release_stub];
  __birthday = nil;
  __birthday_isset = NO;
}

- (NSString *) idCard {
  return [[__idCard retain_stub] autorelease_stub];
}

- (void) setIdCard: (NSString *) idCard {
  [idCard retain_stub];
  [__idCard release_stub];
  __idCard = idCard;
  __idCard_isset = YES;
}

- (BOOL) idCardIsSet {
  return __idCard_isset;
}

- (void) unsetIdCard {
  [__idCard release_stub];
  __idCard = nil;
  __idCard_isset = NO;
}

- (NSString *) memberCard {
  return [[__memberCard retain_stub] autorelease_stub];
}

- (void) setMemberCard: (NSString *) memberCard {
  [memberCard retain_stub];
  [__memberCard release_stub];
  __memberCard = memberCard;
  __memberCard_isset = YES;
}

- (BOOL) memberCardIsSet {
  return __memberCard_isset;
}

- (void) unsetMemberCard {
  [__memberCard release_stub];
  __memberCard = nil;
  __memberCard_isset = NO;
}

- (NSString *) phone {
  return [[__phone retain_stub] autorelease_stub];
}

- (void) setPhone: (NSString *) phone {
  [phone retain_stub];
  [__phone release_stub];
  __phone = phone;
  __phone_isset = YES;
}

- (BOOL) phoneIsSet {
  return __phone_isset;
}

- (void) unsetPhone {
  [__phone release_stub];
  __phone = nil;
  __phone_isset = NO;
}

- (BOOL) phoneVerified {
  return __phoneVerified;
}

- (void) setPhoneVerified: (BOOL) phoneVerified {
  __phoneVerified = phoneVerified;
  __phoneVerified_isset = YES;
}

- (BOOL) phoneVerifiedIsSet {
  return __phoneVerified_isset;
}

- (void) unsetPhoneVerified {
  __phoneVerified_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) level {
  return [[__level retain_stub] autorelease_stub];
}

- (void) setLevel: (NSString *) level {
  [level retain_stub];
  [__level release_stub];
  __level = level;
  __level_isset = YES;
}

- (BOOL) levelIsSet {
  return __level_isset;
}

- (void) unsetLevel {
  [__level release_stub];
  __level = nil;
  __level_isset = NO;
}

- (BOOL) isMale {
  return __isMale;
}

- (void) setIsMale: (BOOL) isMale {
  __isMale = isMale;
  __isMale_isset = YES;
}

- (BOOL) isMaleIsSet {
  return __isMale_isset;
}

- (void) unsetIsMale {
  __isMale_isset = NO;
}

- (int32_t) memberType {
  return __memberType;
}

- (void) setMemberType: (int32_t) memberType {
  __memberType = memberType;
  __memberType_isset = YES;
}

- (BOOL) memberTypeIsSet {
  return __memberType_isset;
}

- (void) unsetMemberType {
  __memberType_isset = NO;
}

- (BOOL) isPayTrain {
  return __isPayTrain;
}

- (void) setIsPayTrain: (BOOL) isPayTrain {
  __isPayTrain = isPayTrain;
  __isPayTrain_isset = YES;
}

- (BOOL) isPayTrainIsSet {
  return __isPayTrain_isset;
}

- (void) unsetIsPayTrain {
  __isPayTrain_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMemberId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBirthday: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIdCard: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMemberCard: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPhone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPhoneVerified: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsMale: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemberType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsPayTrain: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Member"];
  if (__memberId_isset) {
    [outProtocol writeFieldBeginWithName: @"memberId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __memberId];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__birthday_isset) {
    if (__birthday != nil) {
      [outProtocol writeFieldBeginWithName: @"birthday" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __birthday];
      [outProtocol writeFieldEnd];
    }
  }
  if (__idCard_isset) {
    if (__idCard != nil) {
      [outProtocol writeFieldBeginWithName: @"idCard" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __idCard];
      [outProtocol writeFieldEnd];
    }
  }
  if (__memberCard_isset) {
    if (__memberCard != nil) {
      [outProtocol writeFieldBeginWithName: @"memberCard" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __memberCard];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phone_isset) {
    if (__phone != nil) {
      [outProtocol writeFieldBeginWithName: @"phone" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __phone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__phoneVerified_isset) {
    [outProtocol writeFieldBeginWithName: @"phoneVerified" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __phoneVerified];
    [outProtocol writeFieldEnd];
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__level_isset) {
    if (__level != nil) {
      [outProtocol writeFieldBeginWithName: @"level" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __level];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isMale_isset) {
    [outProtocol writeFieldBeginWithName: @"isMale" type: TType_BOOL fieldID: 10];
    [outProtocol writeBool: __isMale];
    [outProtocol writeFieldEnd];
  }
  if (__memberType_isset) {
    [outProtocol writeFieldBeginWithName: @"memberType" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __memberType];
    [outProtocol writeFieldEnd];
  }
  if (__isPayTrain_isset) {
    [outProtocol writeFieldBeginWithName: @"isPayTrain" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __isPayTrain];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Member("];
  [ms appendString: @"memberId:"];
  [ms appendFormat: @"%qi", __memberId];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",birthday:"];
  [ms appendFormat: @"\"%@\"", __birthday];
  [ms appendString: @",idCard:"];
  [ms appendFormat: @"\"%@\"", __idCard];
  [ms appendString: @",memberCard:"];
  [ms appendFormat: @"\"%@\"", __memberCard];
  [ms appendString: @",phone:"];
  [ms appendFormat: @"\"%@\"", __phone];
  [ms appendString: @",phoneVerified:"];
  [ms appendFormat: @"%i", __phoneVerified];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",level:"];
  [ms appendFormat: @"\"%@\"", __level];
  [ms appendString: @",isMale:"];
  [ms appendFormat: @"%i", __isMale];
  [ms appendString: @",memberType:"];
  [ms appendFormat: @"%i", __memberType];
  [ms appendString: @",isPayTrain:"];
  [ms appendFormat: @"%i", __isPayTrain];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Voucher

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithVoucherId: (int64_t) voucherId value: (double) value startTime: (int64_t) startTime endTime: (int64_t) endTime notice: (NSString *) notice
{
  self = [super init];
  __voucherId = voucherId;
  __voucherId_isset = YES;
  __value = value;
  __value_isset = YES;
  __startTime = startTime;
  __startTime_isset = YES;
  __endTime = endTime;
  __endTime_isset = YES;
  __notice = [notice retain_stub];
  __notice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"voucherId"])
  {
    __voucherId = [decoder decodeInt64ForKey: @"voucherId"];
    __voucherId_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [decoder decodeDoubleForKey: @"value"];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"startTime"])
  {
    __startTime = [decoder decodeInt64ForKey: @"startTime"];
    __startTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endTime"])
  {
    __endTime = [decoder decodeInt64ForKey: @"endTime"];
    __endTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"notice"])
  {
    __notice = [[decoder decodeObjectForKey: @"notice"] retain_stub];
    __notice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__voucherId_isset)
  {
    [encoder encodeInt64: __voucherId forKey: @"voucherId"];
  }
  if (__value_isset)
  {
    [encoder encodeDouble: __value forKey: @"value"];
  }
  if (__startTime_isset)
  {
    [encoder encodeInt64: __startTime forKey: @"startTime"];
  }
  if (__endTime_isset)
  {
    [encoder encodeInt64: __endTime forKey: @"endTime"];
  }
  if (__notice_isset)
  {
    [encoder encodeObject: __notice forKey: @"notice"];
  }
}

- (void) dealloc
{
  [__notice release_stub];
  [super dealloc_stub];
}

- (int64_t) voucherId {
  return __voucherId;
}

- (void) setVoucherId: (int64_t) voucherId {
  __voucherId = voucherId;
  __voucherId_isset = YES;
}

- (BOOL) voucherIdIsSet {
  return __voucherId_isset;
}

- (void) unsetVoucherId {
  __voucherId_isset = NO;
}

- (double) value {
  return __value;
}

- (void) setValue: (double) value {
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  __value_isset = NO;
}

- (int64_t) startTime {
  return __startTime;
}

- (void) setStartTime: (int64_t) startTime {
  __startTime = startTime;
  __startTime_isset = YES;
}

- (BOOL) startTimeIsSet {
  return __startTime_isset;
}

- (void) unsetStartTime {
  __startTime_isset = NO;
}

- (int64_t) endTime {
  return __endTime;
}

- (void) setEndTime: (int64_t) endTime {
  __endTime = endTime;
  __endTime_isset = YES;
}

- (BOOL) endTimeIsSet {
  return __endTime_isset;
}

- (void) unsetEndTime {
  __endTime_isset = NO;
}

- (NSString *) notice {
  return [[__notice retain_stub] autorelease_stub];
}

- (void) setNotice: (NSString *) notice {
  [notice retain_stub];
  [__notice release_stub];
  __notice = notice;
  __notice_isset = YES;
}

- (BOOL) noticeIsSet {
  return __notice_isset;
}

- (void) unsetNotice {
  [__notice release_stub];
  __notice = nil;
  __notice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setVoucherId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Voucher"];
  if (__voucherId_isset) {
    [outProtocol writeFieldBeginWithName: @"voucherId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __voucherId];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    [outProtocol writeFieldBeginWithName: @"value" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __value];
    [outProtocol writeFieldEnd];
  }
  if (__startTime_isset) {
    [outProtocol writeFieldBeginWithName: @"startTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __startTime];
    [outProtocol writeFieldEnd];
  }
  if (__endTime_isset) {
    [outProtocol writeFieldBeginWithName: @"endTime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __endTime];
    [outProtocol writeFieldEnd];
  }
  if (__notice_isset) {
    if (__notice != nil) {
      [outProtocol writeFieldBeginWithName: @"notice" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __notice];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Voucher("];
  [ms appendString: @"voucherId:"];
  [ms appendFormat: @"%qi", __voucherId];
  [ms appendString: @",value:"];
  [ms appendFormat: @"%f", __value];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"%qi", __startTime];
  [ms appendString: @",endTime:"];
  [ms appendFormat: @"%qi", __endTime];
  [ms appendString: @",notice:"];
  [ms appendFormat: @"\"%@\"", __notice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RefundCoupon

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRefundCouponId: (int64_t) refundCouponId value: (double) value startTime: (int64_t) startTime endTime: (int64_t) endTime notice: (NSString *) notice
{
  self = [super init];
  __refundCouponId = refundCouponId;
  __refundCouponId_isset = YES;
  __value = value;
  __value_isset = YES;
  __startTime = startTime;
  __startTime_isset = YES;
  __endTime = endTime;
  __endTime_isset = YES;
  __notice = [notice retain_stub];
  __notice_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"refundCouponId"])
  {
    __refundCouponId = [decoder decodeInt64ForKey: @"refundCouponId"];
    __refundCouponId_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [decoder decodeDoubleForKey: @"value"];
    __value_isset = YES;
  }
  if ([decoder containsValueForKey: @"startTime"])
  {
    __startTime = [decoder decodeInt64ForKey: @"startTime"];
    __startTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"endTime"])
  {
    __endTime = [decoder decodeInt64ForKey: @"endTime"];
    __endTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"notice"])
  {
    __notice = [[decoder decodeObjectForKey: @"notice"] retain_stub];
    __notice_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__refundCouponId_isset)
  {
    [encoder encodeInt64: __refundCouponId forKey: @"refundCouponId"];
  }
  if (__value_isset)
  {
    [encoder encodeDouble: __value forKey: @"value"];
  }
  if (__startTime_isset)
  {
    [encoder encodeInt64: __startTime forKey: @"startTime"];
  }
  if (__endTime_isset)
  {
    [encoder encodeInt64: __endTime forKey: @"endTime"];
  }
  if (__notice_isset)
  {
    [encoder encodeObject: __notice forKey: @"notice"];
  }
}

- (void) dealloc
{
  [__notice release_stub];
  [super dealloc_stub];
}

- (int64_t) refundCouponId {
  return __refundCouponId;
}

- (void) setRefundCouponId: (int64_t) refundCouponId {
  __refundCouponId = refundCouponId;
  __refundCouponId_isset = YES;
}

- (BOOL) refundCouponIdIsSet {
  return __refundCouponId_isset;
}

- (void) unsetRefundCouponId {
  __refundCouponId_isset = NO;
}

- (double) value {
  return __value;
}

- (void) setValue: (double) value {
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  __value_isset = NO;
}

- (int64_t) startTime {
  return __startTime;
}

- (void) setStartTime: (int64_t) startTime {
  __startTime = startTime;
  __startTime_isset = YES;
}

- (BOOL) startTimeIsSet {
  return __startTime_isset;
}

- (void) unsetStartTime {
  __startTime_isset = NO;
}

- (int64_t) endTime {
  return __endTime;
}

- (void) setEndTime: (int64_t) endTime {
  __endTime = endTime;
  __endTime_isset = YES;
}

- (BOOL) endTimeIsSet {
  return __endTime_isset;
}

- (void) unsetEndTime {
  __endTime_isset = NO;
}

- (NSString *) notice {
  return [[__notice retain_stub] autorelease_stub];
}

- (void) setNotice: (NSString *) notice {
  [notice retain_stub];
  [__notice release_stub];
  __notice = notice;
  __notice_isset = YES;
}

- (BOOL) noticeIsSet {
  return __notice_isset;
}

- (void) unsetNotice {
  [__notice release_stub];
  __notice = nil;
  __notice_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRefundCouponId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEndTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RefundCoupon"];
  if (__refundCouponId_isset) {
    [outProtocol writeFieldBeginWithName: @"refundCouponId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __refundCouponId];
    [outProtocol writeFieldEnd];
  }
  if (__value_isset) {
    [outProtocol writeFieldBeginWithName: @"value" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __value];
    [outProtocol writeFieldEnd];
  }
  if (__startTime_isset) {
    [outProtocol writeFieldBeginWithName: @"startTime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __startTime];
    [outProtocol writeFieldEnd];
  }
  if (__endTime_isset) {
    [outProtocol writeFieldBeginWithName: @"endTime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __endTime];
    [outProtocol writeFieldEnd];
  }
  if (__notice_isset) {
    if (__notice != nil) {
      [outProtocol writeFieldBeginWithName: @"notice" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __notice];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RefundCoupon("];
  [ms appendString: @"refundCouponId:"];
  [ms appendFormat: @"%qi", __refundCouponId];
  [ms appendString: @",value:"];
  [ms appendFormat: @"%f", __value];
  [ms appendString: @",startTime:"];
  [ms appendFormat: @"%qi", __startTime];
  [ms appendString: @",endTime:"];
  [ms appendFormat: @"%qi", __endTime];
  [ms appendString: @",notice:"];
  [ms appendFormat: @"\"%@\"", __notice];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Asset

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPoint: (int32_t) point voucherAmount: (int32_t) voucherAmount voucherValue: (int32_t) voucherValue voucher: (NSMutableArray *) voucher refundCouponAmount: (int32_t) refundCouponAmount refundCouponValue: (int32_t) refundCouponValue refundCoupon: (NSMutableArray *) refundCoupon storedValue: (double) storedValue totalTreasure: (int32_t) totalTreasure
{
  self = [super init];
  __point = point;
  __point_isset = YES;
  __voucherAmount = voucherAmount;
  __voucherAmount_isset = YES;
  __voucherValue = voucherValue;
  __voucherValue_isset = YES;
  __voucher = [voucher retain_stub];
  __voucher_isset = YES;
  __refundCouponAmount = refundCouponAmount;
  __refundCouponAmount_isset = YES;
  __refundCouponValue = refundCouponValue;
  __refundCouponValue_isset = YES;
  __refundCoupon = [refundCoupon retain_stub];
  __refundCoupon_isset = YES;
  __storedValue = storedValue;
  __storedValue_isset = YES;
  __totalTreasure = totalTreasure;
  __totalTreasure_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"point"])
  {
    __point = [decoder decodeInt32ForKey: @"point"];
    __point_isset = YES;
  }
  if ([decoder containsValueForKey: @"voucherAmount"])
  {
    __voucherAmount = [decoder decodeInt32ForKey: @"voucherAmount"];
    __voucherAmount_isset = YES;
  }
  if ([decoder containsValueForKey: @"voucherValue"])
  {
    __voucherValue = [decoder decodeInt32ForKey: @"voucherValue"];
    __voucherValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"voucher"])
  {
    __voucher = [[decoder decodeObjectForKey: @"voucher"] retain_stub];
    __voucher_isset = YES;
  }
  if ([decoder containsValueForKey: @"refundCouponAmount"])
  {
    __refundCouponAmount = [decoder decodeInt32ForKey: @"refundCouponAmount"];
    __refundCouponAmount_isset = YES;
  }
  if ([decoder containsValueForKey: @"refundCouponValue"])
  {
    __refundCouponValue = [decoder decodeInt32ForKey: @"refundCouponValue"];
    __refundCouponValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"refundCoupon"])
  {
    __refundCoupon = [[decoder decodeObjectForKey: @"refundCoupon"] retain_stub];
    __refundCoupon_isset = YES;
  }
  if ([decoder containsValueForKey: @"storedValue"])
  {
    __storedValue = [decoder decodeDoubleForKey: @"storedValue"];
    __storedValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"totalTreasure"])
  {
    __totalTreasure = [decoder decodeInt32ForKey: @"totalTreasure"];
    __totalTreasure_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__point_isset)
  {
    [encoder encodeInt32: __point forKey: @"point"];
  }
  if (__voucherAmount_isset)
  {
    [encoder encodeInt32: __voucherAmount forKey: @"voucherAmount"];
  }
  if (__voucherValue_isset)
  {
    [encoder encodeInt32: __voucherValue forKey: @"voucherValue"];
  }
  if (__voucher_isset)
  {
    [encoder encodeObject: __voucher forKey: @"voucher"];
  }
  if (__refundCouponAmount_isset)
  {
    [encoder encodeInt32: __refundCouponAmount forKey: @"refundCouponAmount"];
  }
  if (__refundCouponValue_isset)
  {
    [encoder encodeInt32: __refundCouponValue forKey: @"refundCouponValue"];
  }
  if (__refundCoupon_isset)
  {
    [encoder encodeObject: __refundCoupon forKey: @"refundCoupon"];
  }
  if (__storedValue_isset)
  {
    [encoder encodeDouble: __storedValue forKey: @"storedValue"];
  }
  if (__totalTreasure_isset)
  {
    [encoder encodeInt32: __totalTreasure forKey: @"totalTreasure"];
  }
}

- (void) dealloc
{
  [__voucher release_stub];
  [__refundCoupon release_stub];
  [super dealloc_stub];
}

- (int32_t) point {
  return __point;
}

- (void) setPoint: (int32_t) point {
  __point = point;
  __point_isset = YES;
}

- (BOOL) pointIsSet {
  return __point_isset;
}

- (void) unsetPoint {
  __point_isset = NO;
}

- (int32_t) voucherAmount {
  return __voucherAmount;
}

- (void) setVoucherAmount: (int32_t) voucherAmount {
  __voucherAmount = voucherAmount;
  __voucherAmount_isset = YES;
}

- (BOOL) voucherAmountIsSet {
  return __voucherAmount_isset;
}

- (void) unsetVoucherAmount {
  __voucherAmount_isset = NO;
}

- (int32_t) voucherValue {
  return __voucherValue;
}

- (void) setVoucherValue: (int32_t) voucherValue {
  __voucherValue = voucherValue;
  __voucherValue_isset = YES;
}

- (BOOL) voucherValueIsSet {
  return __voucherValue_isset;
}

- (void) unsetVoucherValue {
  __voucherValue_isset = NO;
}

- (NSMutableArray *) voucher {
  return [[__voucher retain_stub] autorelease_stub];
}

- (void) setVoucher: (NSMutableArray *) voucher {
  [voucher retain_stub];
  [__voucher release_stub];
  __voucher = voucher;
  __voucher_isset = YES;
}

- (BOOL) voucherIsSet {
  return __voucher_isset;
}

- (void) unsetVoucher {
  [__voucher release_stub];
  __voucher = nil;
  __voucher_isset = NO;
}

- (int32_t) refundCouponAmount {
  return __refundCouponAmount;
}

- (void) setRefundCouponAmount: (int32_t) refundCouponAmount {
  __refundCouponAmount = refundCouponAmount;
  __refundCouponAmount_isset = YES;
}

- (BOOL) refundCouponAmountIsSet {
  return __refundCouponAmount_isset;
}

- (void) unsetRefundCouponAmount {
  __refundCouponAmount_isset = NO;
}

- (int32_t) refundCouponValue {
  return __refundCouponValue;
}

- (void) setRefundCouponValue: (int32_t) refundCouponValue {
  __refundCouponValue = refundCouponValue;
  __refundCouponValue_isset = YES;
}

- (BOOL) refundCouponValueIsSet {
  return __refundCouponValue_isset;
}

- (void) unsetRefundCouponValue {
  __refundCouponValue_isset = NO;
}

- (NSMutableArray *) refundCoupon {
  return [[__refundCoupon retain_stub] autorelease_stub];
}

- (void) setRefundCoupon: (NSMutableArray *) refundCoupon {
  [refundCoupon retain_stub];
  [__refundCoupon release_stub];
  __refundCoupon = refundCoupon;
  __refundCoupon_isset = YES;
}

- (BOOL) refundCouponIsSet {
  return __refundCoupon_isset;
}

- (void) unsetRefundCoupon {
  [__refundCoupon release_stub];
  __refundCoupon = nil;
  __refundCoupon_isset = NO;
}

- (double) storedValue {
  return __storedValue;
}

- (void) setStoredValue: (double) storedValue {
  __storedValue = storedValue;
  __storedValue_isset = YES;
}

- (BOOL) storedValueIsSet {
  return __storedValue_isset;
}

- (void) unsetStoredValue {
  __storedValue_isset = NO;
}

- (int32_t) totalTreasure {
  return __totalTreasure;
}

- (void) setTotalTreasure: (int32_t) totalTreasure {
  __totalTreasure = totalTreasure;
  __totalTreasure_isset = YES;
}

- (BOOL) totalTreasureIsSet {
  return __totalTreasure_isset;
}

- (void) unsetTotalTreasure {
  __totalTreasure_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPoint: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVoucherAmount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVoucherValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            Voucher *_elem2 = [[Voucher alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setVoucher: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRefundCouponAmount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRefundCouponValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            RefundCoupon *_elem5 = [[RefundCoupon alloc] init];
            [_elem5 read: inProtocol];
            [fieldValue addObject: _elem5];
            [_elem5 release_stub];
          }
          [inProtocol readListEnd];
          [self setRefundCoupon: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setStoredValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTotalTreasure: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Asset"];
  if (__point_isset) {
    [outProtocol writeFieldBeginWithName: @"point" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __point];
    [outProtocol writeFieldEnd];
  }
  if (__voucherAmount_isset) {
    [outProtocol writeFieldBeginWithName: @"voucherAmount" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __voucherAmount];
    [outProtocol writeFieldEnd];
  }
  if (__voucherValue_isset) {
    [outProtocol writeFieldBeginWithName: @"voucherValue" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __voucherValue];
    [outProtocol writeFieldEnd];
  }
  if (__voucher_isset) {
    if (__voucher != nil) {
      [outProtocol writeFieldBeginWithName: @"voucher" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__voucher count]];
        int i7;
        for (i7 = 0; i7 < [__voucher count]; i7++)
        {
          [[__voucher objectAtIndex: i7] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__refundCouponAmount_isset) {
    [outProtocol writeFieldBeginWithName: @"refundCouponAmount" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __refundCouponAmount];
    [outProtocol writeFieldEnd];
  }
  if (__refundCouponValue_isset) {
    [outProtocol writeFieldBeginWithName: @"refundCouponValue" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __refundCouponValue];
    [outProtocol writeFieldEnd];
  }
  if (__refundCoupon_isset) {
    if (__refundCoupon != nil) {
      [outProtocol writeFieldBeginWithName: @"refundCoupon" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__refundCoupon count]];
        int i9;
        for (i9 = 0; i9 < [__refundCoupon count]; i9++)
        {
          [[__refundCoupon objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__storedValue_isset) {
    [outProtocol writeFieldBeginWithName: @"storedValue" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __storedValue];
    [outProtocol writeFieldEnd];
  }
  if (__totalTreasure_isset) {
    [outProtocol writeFieldBeginWithName: @"totalTreasure" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __totalTreasure];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Asset("];
  [ms appendString: @"point:"];
  [ms appendFormat: @"%i", __point];
  [ms appendString: @",voucherAmount:"];
  [ms appendFormat: @"%i", __voucherAmount];
  [ms appendString: @",voucherValue:"];
  [ms appendFormat: @"%i", __voucherValue];
  [ms appendString: @",voucher:"];
  [ms appendFormat: @"%@", __voucher];
  [ms appendString: @",refundCouponAmount:"];
  [ms appendFormat: @"%i", __refundCouponAmount];
  [ms appendString: @",refundCouponValue:"];
  [ms appendFormat: @"%i", __refundCouponValue];
  [ms appendString: @",refundCoupon:"];
  [ms appendFormat: @"%@", __refundCoupon];
  [ms appendString: @",storedValue:"];
  [ms appendFormat: @"%f", __storedValue];
  [ms appendString: @",totalTreasure:"];
  [ms appendFormat: @"%i", __totalTreasure];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Signture

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUsername: (NSString *) username password: (NSString *) password
{
  self = [super init];
  __username = [username retain_stub];
  __username_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__username release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Signture"];
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Signture("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Credential

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (NSString *) token member: (Member *) member
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __member = [member retain_stub];
  __member_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"member"])
  {
    __member = [[decoder decodeObjectForKey: @"member"] retain_stub];
    __member_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__member_isset)
  {
    [encoder encodeObject: __member forKey: @"member"];
  }
}

- (void) dealloc
{
  [__token release_stub];
  [__member release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (Member *) member {
  return [[__member retain_stub] autorelease_stub];
}

- (void) setMember: (Member *) member {
  [member retain_stub];
  [__member release_stub];
  __member = member;
  __member_isset = YES;
}

- (BOOL) memberIsSet {
  return __member_isset;
}

- (void) unsetMember {
  [__member release_stub];
  __member = nil;
  __member_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Member *fieldValue = [[Member alloc] init];
          [fieldValue read: inProtocol];
          [self setMember: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Credential"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__member_isset) {
    if (__member != nil) {
      [outProtocol writeFieldBeginWithName: @"member" type: TType_STRUCT fieldID: 2];
      [__member write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Credential("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",member:"];
  [ms appendFormat: @"%@", __member];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation MemberInfoRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithMemberId: (int64_t) memberId pageIndex: (int32_t) pageIndex pageSize: (int32_t) pageSize
{
  self = [super init];
  __memberId = memberId;
  __memberId_isset = YES;
  __pageIndex = pageIndex;
  __pageIndex_isset = YES;
  __pageSize = pageSize;
  __pageSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"memberId"])
  {
    __memberId = [decoder decodeInt64ForKey: @"memberId"];
    __memberId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageIndex"])
  {
    __pageIndex = [decoder decodeInt32ForKey: @"pageIndex"];
    __pageIndex_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageSize"])
  {
    __pageSize = [decoder decodeInt32ForKey: @"pageSize"];
    __pageSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__memberId_isset)
  {
    [encoder encodeInt64: __memberId forKey: @"memberId"];
  }
  if (__pageIndex_isset)
  {
    [encoder encodeInt32: __pageIndex forKey: @"pageIndex"];
  }
  if (__pageSize_isset)
  {
    [encoder encodeInt32: __pageSize forKey: @"pageSize"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) memberId {
  return __memberId;
}

- (void) setMemberId: (int64_t) memberId {
  __memberId = memberId;
  __memberId_isset = YES;
}

- (BOOL) memberIdIsSet {
  return __memberId_isset;
}

- (void) unsetMemberId {
  __memberId_isset = NO;
}

- (int32_t) pageIndex {
  return __pageIndex;
}

- (void) setPageIndex: (int32_t) pageIndex {
  __pageIndex = pageIndex;
  __pageIndex_isset = YES;
}

- (BOOL) pageIndexIsSet {
  return __pageIndex_isset;
}

- (void) unsetPageIndex {
  __pageIndex_isset = NO;
}

- (int32_t) pageSize {
  return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
  __pageSize = pageSize;
  __pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
  return __pageSize_isset;
}

- (void) unsetPageSize {
  __pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMemberId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MemberInfoRequest"];
  if (__memberId_isset) {
    [outProtocol writeFieldBeginWithName: @"memberId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __memberId];
    [outProtocol writeFieldEnd];
  }
  if (__pageIndex_isset) {
    [outProtocol writeFieldBeginWithName: @"pageIndex" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __pageIndex];
    [outProtocol writeFieldEnd];
  }
  if (__pageSize_isset) {
    [outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __pageSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MemberInfoRequest("];
  [ms appendString: @"memberId:"];
  [ms appendFormat: @"%qi", __memberId];
  [ms appendString: @",pageIndex:"];
  [ms appendFormat: @"%i", __pageIndex];
  [ms appendString: @",pageSize:"];
  [ms appendFormat: @"%i", __pageSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation TMemberConstants
+ (void) initialize {
}
@end

